plugins {
    id "idea"
    id 'scala'
    id 'net.minecraftforge.gradle' version '[6.0,6.2)'
}

java {
    toolchain.languageVersion = JavaLanguageVersion.of(17)
}

file "build.properties" withReader {
    def prop = new Properties()
    prop.load(it)
    ext.config = new ConfigSlurper().parse prop
}
if (!project.hasProperty("mod_version")) {
    project.ext.mod_version = config.mod.version
}

version = "${mod_version}"
if (version.endsWith("-snapshot")) {
    version += "-" + (new Date().format('yyyyMMdd'))
}

group = config.mod.group

base {
    archivesName = config.mod.name
}

def getGitRef() {
    try {
        def stdout = new ByteArrayOutputStream()
        exec {
            commandLine 'git', 'rev-parse', '--short', 'HEAD'
            standardOutput = stdout
        }
        return stdout.toString().trim()
    } catch (Throwable e) {
        return "unknown"
    }
}

version += "+" + getGitRef()

ext.simpleVersion = version
version = "MC${config.minecraft.version}-${project.version}"

minecraft {
    mappings channel: "official", version: config.minecraft.mappings_version

    accessTransformer = file("src/main/resources/META-INF/accesstransformer.cfg")

    runs {
        all {
            property "forge.logging.markers", "REGISTRIES"
            property "forge.logging.console.level", "debug"

            mods {
                oc2r {
                    source sourceSets.main
                }
            }
        }

        client {
            workingDirectory project.file("runclient")
            property "forge.enabledGameTestNamespaces", "oc"
        }

        server {
            workingDirectory project.file("run")
            property "forge.enabledGameTestNamespaces", "oc"
            arg "--nogui"
        }

        gameTestServer {
            workingDirectory project.file('run')
            property "forge.enabledGameTestNamespaces", "oc"
        }

        data {
            workingDirectory project.file("run")
            args "--mod", "oc", "--all", "--output", file("src/generated/resources/"), "--existing", file("src/main/resources")
        }
    }
}

task replaceSourceTokensScala(type: Sync) {
    from sourceSets.main.scala
    filteringCharset = 'UTF-8'
    filter { line -> line
            .replaceAll('@VERSION@', "${mod_version}")
            .replaceAll('@MCVERSION@', "${config.minecraft.version}") }
    into "$buildDir/srcReplaced/scala"
}

repositories {
    maven {
        name "MightyPirates"
        url "https://maven.cil.li/"
        metadataSources {
            mavenPom()
            artifact()
        }
    }
    maven {
        // location of the maven that hosts JEI files since January 2023
        name = "Jared's maven"
        url = "https://maven.blamejared.com/"
    }
    maven {
        name "SquidDev" /* CC: Tweaked */
        url "https://squiddev.cc/maven/"
    }
    ivy {
        name 'asie dependency mirror'
        artifactPattern "https://asie.pl/javadeps/[module]-[revision](-[classifier]).[ext]"
        content {
            includeModule '', 'OC-LuaJ'
            includeModule '', 'OC-JNLua'
            includeModule '', 'OC-JNLua-Natives'
        }
        metadataSources {
            artifact()
        }
    }
    maven {
        url "https://cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
    maven {
        url "https://modmaven.dev"
        content {
            includeGroup "mezz.jei"
        }
    }
    maven {
        url "https://chickenbones.net/maven/"
        content {
            includeGroup "codechicken"
            includeGroup "mrtjp"
        }
    }
    maven {
        url "https://modmaven.dev/"
        content {
            includeGroup "appeng"
            includeGroup "mekanism"
        }
    }
    maven {
        url "https://proxy-maven.covers1624.net/"
        content {
            includeModule "net.minecraftforge", "Scorge"
        }
    }

    maven {
        name = "Azure-SLP"
        url = uri("https://pkgs.dev.azure.com/Kotori316/minecraft/_packaging/mods/maven/v1")
        content {
            it.includeModule("com.kotori316", "ScalableCatsForce".toLowerCase())
            it.includeModule("org.typelevel", "cats-core_3")
            it.includeModule("org.typelevel", "cats-kernel_3")
            it.includeModule("org.typelevel", "cats-free_3")
        }
    }

    mavenCentral()
}

configurations {
    embedded

    compileOnly.extendsFrom provided
    implementation.extendsFrom embedded
}

dependencies {
    minecraft "net.minecraftforge:forge:${config.minecraft.version}-${config.forge.version}"

    // required for tests but cannot use implementation as that would clash with scorge at runtime
    compileOnly "org.scala-lang:scala-library:2.13.4"
    //implementation "net.minecraftforge:Scorge:${config.scorge.version}"
    runtimeOnly(group: "com.kotori316", name: "ScalableCatsForce".toLowerCase(), version: "3.3.0-build-2", classifier: "with-library") {
        transitive(false)
    }
    embedded "com.typesafe:config:1.2.1"

    compileOnly fg.deobf("curse.maven:cofh-core-69162:5374122")
    compileOnly fg.deobf("curse.maven:tis-3d-238603:5266276")
    //compileOnly fg.deobf("curse.maven:hwyla-${config.hwyla.projectId}:${config.hwyla.fileId}")
    compileOnly fg.deobf("curse.maven:cc-tweaked-282001:5379173")
    compileOnly fg.deobf("curse.maven:thermal-foundation-222880:5443583") /* Thermal Foundation */

    //runtimeOnly fg.deobf("curse.maven:modernfix-790626:5425647")

    provided fg.deobf("appeng:appliedenergistics2-forge:${config.ae2.version}:api") {
        transitive = false
    }

    provided fg.deobf("mekanism:Mekanism:${config.mekanism.version}:api") {
        transitive = false
    }

    provided fg.deobf("curse.maven:cb-multipart-258426:5311521")

    provided fg.deobf("codechicken:ChickenASM:${config.casm.version}")

    compileOnly(fg.deobf("mezz.jei:jei-${config.minecraft.version}-common-api:${config.jei.version}"))
    compileOnly(fg.deobf("mezz.jei:jei-${config.minecraft.version}-forge-api:${config.jei.version}"))
    provided fg.deobf("curse.maven:codechicken-lib-1-8-242818:5420418")

    runtimeOnly(fg.deobf("mezz.jei:jei-${config.minecraft.version}-forge:${config.jei.version}"))

    embedded name: 'OC-LuaJ', version: '20220907.1', ext: 'jar'
    embedded name: 'OC-JNLua', version: '20230530.0', ext: 'jar'
    embedded name: 'OC-JNLua-Natives', version: '20220928.1', ext: 'jar'

    testImplementation "org.scala-lang:scala-library:2.13.4"
    testImplementation "junit:junit:4.13"
    testImplementation "org.mockito:mockito-core:3.4.0"
    testImplementation "org.scalactic:scalactic_2.13:3.2.6"
    testImplementation "org.scalatest:scalatest_2.13:3.2.6"
    testImplementation "org.scalatestplus:junit-4-13_2.13:3.2.6.+"
    testImplementation "org.scalatestplus:mockito-3-4_2.13:3.2.6.+"

    provided fg.deobf("curse.maven:ender-storage-1-8-245174:5292573")
}

processResources {
    def reducedScorgeVer = config.scorge.version.replaceAll(/(\d+\.\d+)(\.\d+)/, "\$1")

    inputs.property "version", "${mod_version}"
    inputs.property "mcversion", config.minecraft.version
    inputs.property "sversion", reducedScorgeVer
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    filesMatching(['META-INF/mods.toml']) {
        expand 'version':"${mod_version}", 'mcversion':config.minecraft.version, 'sversion':reducedScorgeVer
    }
    filesMatching(['application.conf']) {
        filter { line ->
            line.replaceAll("@VERSION@", "${mod_version}")
        }
    }
}

jar {
    manifest {
        attributes([
            "Specification-Title": "opencomputers",
            "Specification-Vendor": "li.cil.oc",
            "Specification-Version": "1",
            "Implementation-Title": project.name,
            "Implementation-Version": version,
            "Implementation-Vendor": config.mod.group,
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

javadoc {
    include 'li/cil/oc/api/**'
}

task apiJar(type: Jar) {
    from sourceSets.main.allSource
    from sourceSets.main.output
    archiveClassifier = 'api'
    include 'li/cil/oc/api/**'
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    from javadoc.destinationDir
    archiveClassifier = 'javadoc'
}

artifacts {
    archives apiJar
    archives javadocJar
}
